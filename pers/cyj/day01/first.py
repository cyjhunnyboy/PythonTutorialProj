# -*- coding: UTF-8 -*-
# author: chenyongjun

"""
数据的存储

思考：为什么使用计算机？
    存储数据，计算数据

思考：数据存在哪里？
    数据存储在内存里

思考：数据怎么在内存里存储的？
    首先弄明白怎么存储数字

内存：
    抽象：一个开关，有两种状态，开启和关闭。一种状态对应1，另一中种状态对应0。
        把八个开关放到一个房间里，这个房间称为“一个字节”，一个 开关代表“一位”。每个房间都有门牌号，
        看做“地址”。把无数个房间堆叠起来组成魔天大厦，可以把魔天大厦看成“内存”

    内存单位：
        1bit
        8bit         ==1B
        1024B        ==1k
        1024K        ==1M
        1024M        ==1G
        1024G        ==1T

    内存中以二进制形式存储数据

二进制：0、1     逢二进一
    0 + 0 = 0
    0 + 1 = 1
    1 + 1 = 10
    11 + 1 = 100

八进制：0、1、2、3、4、5、6、7     逢八进一
    1 + 7 = 10
    1 + 2 = 3

十进制：0、1、2、3、4、5、6、7、8、9     逢十进一

十六进制：0、1、2、3、4、5、6、7、8、9、a、b、c、d、e、f    逢十六进一
    1 + f = 10
    作用：内存地址值用十六进制数表示

十进制->二进制
    倒除法，余数逆序

    10(10) -> 1010(2)

二进制转十进制
    当前的数字，乘以2的位数次方，最后相加
    0*2^0 + 1*2^1 + 0*2^2 + 1*2^3 = 0 + 2 + 0 + 8 = 10
    1010(2) -> 10(10)

八进制->二进制
    【一转三位】八进制的一位相等于二进制的三位，转换时按照十进制转换
    8421码
    65(8) = 110101(2)

十六进制->二进制
    【一转四位】十六进制的一位相当于二进制的四位，转换时按照十进制转换
    a4(16) = 10100100(2)

二进制->八进制
    【三位一取】从低位开始取，高位不够补0
    110101(2) = 65(8)

二进制->十六进制
    【四位一取】从低位开始取，高位不够补0
    10100100(2) = a4(16)

10(10)->1010(2)
    数据存储：计算机存储数据，先开辟内存空间，再存储数据。计算机开辟内存的最小单位是字节。
    在存储数据时，用最高位表示符号，1表示负数，0表示正数。

    00000000 00000000 00000000 00001010

    00000000 00000000 00000000 00000001
    10000000 00000000 00000000 00000001 +
    -------------------------------------
    10000000 00000000 00000000 00000010（错误的，计算机是以补码进行运算和存储的）

"""

if __name__ == "__main__":
    # 输出
    # 注释，注释一行，注释的内容不执行，仅作为解释说明使用
    # print 为Python的输出函数。输出双引号之间的内容。
    print("Tom is a good man!")
